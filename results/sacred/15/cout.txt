[INFO 21:00:15] pymarl Running command 'my_main'
[INFO 21:00:15] pymarl Started run with ID "15"
[DEBUG 21:00:15] pymarl Starting Heartbeat
[DEBUG 21:00:15] my_main Started
[INFO 21:00:15] my_main Experiment Parameters:
[INFO 21:00:15] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'sc2',
    'env_args': {   'continuing_episode': False,
                    'debug': False,
                    'difficulty': '7',
                    'game_version': None,
                    'heuristic_ai': False,
                    'heuristic_rest': False,
                    'map_name': '2s3z',
                    'move_amount': 2,
                    'obs_all_health': True,
                    'obs_instead_of_state': False,
                    'obs_last_action': False,
                    'obs_own_health': True,
                    'obs_pathing_grid': False,
                    'obs_terrain_height': False,
                    'obs_timestep_number': False,
                    'replay_dir': '',
                    'replay_prefix': '',
                    'reward_death_value': 10,
                    'reward_defeat': 0,
                    'reward_negative_scale': 0.5,
                    'reward_only_positive': True,
                    'reward_scale': True,
                    'reward_scale_rate': 20,
                    'reward_sparse': False,
                    'reward_win': 200,
                    'seed': 557502486,
                    'state_last_action': True,
                    'state_timestep_number': False,
                    'step_mul': 8},
    'epsilon_anneal_time': 50000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'episode',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 557502486,
    't_max': 2050000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': True,
    'use_tensorboard': False}

[INFO 21:00:17] my_main Beginning training for 2050000 timesteps
[INFO 21:00:17] absl Launching SC2: /home/amax/lgh/LINDA/StarCraftII/Versions/Base69232/SC2_x64 -listen 127.0.0.1 -port 45641 -dataDir /home/amax/lgh/LINDA/StarCraftII/ -tempDir /tmp/sc-z_ezu4nq/
[INFO 21:00:17] absl Connecting to: ws://127.0.0.1:45641/sc2api, attempt: 0, running: True
Version: B69232 (SC2.4.6-Publish)
Build: Oct 23 2018 01:43:04
Command Line: '"/home/amax/lgh/LINDA/StarCraftII/Versions/Base69232/SC2_x64" -listen 127.0.0.1 -port 45641 -dataDir /home/amax/lgh/LINDA/StarCraftII/ -tempDir /tmp/sc-z_ezu4nq/'
Starting up...
Startup Phase 1 complete
[INFO 21:00:18] absl Connecting to: ws://127.0.0.1:45641/sc2api, attempt: 1, running: True
Startup Phase 2 complete
Creating stub renderer...
Listening on: 127.0.0.1:45641
Startup Phase 3 complete. Ready for commands.
[INFO 21:00:19] absl Connecting to: ws://127.0.0.1:45641/sc2api, attempt: 2, running: True
Requesting to join a single player game
Configuring interface options
Configure: raw interface enabled
Configure: feature layer interface disabled
Configure: score interface disabled
Configure: render interface disabled
Entering load game phase.
Launching next game.
Next launch phase started: 2
Next launch phase started: 3
Next launch phase started: 4
Next launch phase started: 5
Next launch phase started: 6
Next launch phase started: 7
Next launch phase started: 8
Game has started.
Sending ResponseJoinGame
/home/amax/lgh/LINDA/pymarl-master/src/components/episode_buffer.py:103: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:278.)
  v = th.tensor(v, dtype=dtype, device=self.device)
/home/amax/lgh/LINDA/pymarl-master/src/components/episode_buffer.py:103: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 21:00:26] my_main t_env: 45 / 2050000
[INFO 21:00:26] my_main Estimated time left: 29 minutes, 56 seconds. Time passed: 8 seconds
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:02] my_main Recent Stats | t_env:        429 | Episode:        8
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	return_mean:               3.9216	return_std:                0.0000	test_battle_won_mean:      0.0000
test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500	test_return_mean:          7.2077
test_return_std:           1.4899	
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:09] my_main Recent Stats | t_env:        830 | Episode:       16
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	return_mean:               3.9216	return_std:                0.0000	test_battle_won_mean:      0.0000
test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500	test_return_mean:          7.2077
test_return_std:           1.4899	
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:17] my_main Recent Stats | t_env:       1256 | Episode:       24
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	return_mean:               3.9216	return_std:                0.0000	test_battle_won_mean:      0.0000
test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500	test_return_mean:          7.2077
test_return_std:           1.4899	
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(1701, array(2.2087266, dtype=float32))] <class 'numpy.ndarray'> grad_norm
114514           [(1701, 0.0993373915553093)] <class 'float'> loss
114514           [(1701, 0.03426593329750882)] <class 'float'> q_taken_mean
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(1701, 0.07882765422912992)] <class 'float'> target_mean
114514           [(1701, 0.23834626805004408)] <class 'float'> td_error_abs
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:25] my_main Recent Stats | t_env:       1701 | Episode:       32
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	grad_norm:                 2.2087	loss:                      0.0993	q_taken_mean:              0.0343
return_mean:               3.9216	return_std:                0.0000	target_mean:               0.0788	td_error_abs:              0.2383
test_battle_won_mean:      0.0000	test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500
test_return_mean:          7.2077	test_return_std:           1.4899	
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(1701, array(2.2087266, dtype=float32))] <class 'numpy.ndarray'> grad_norm
114514           [(1701, 0.0993373915553093)] <class 'float'> loss
114514           [(1701, 0.03426593329750882)] <class 'float'> q_taken_mean
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(1701, 0.07882765422912992)] <class 'float'> target_mean
114514           [(1701, 0.23834626805004408)] <class 'float'> td_error_abs
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:34] my_main Recent Stats | t_env:       2123 | Episode:       39
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	grad_norm:                 2.2087	loss:                      0.0993	q_taken_mean:              0.0343
return_mean:               3.9216	return_std:                0.0000	target_mean:               0.0788	td_error_abs:              0.2383
test_battle_won_mean:      0.0000	test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500
test_return_mean:          7.2077	test_return_std:           1.4899	
/home/amax/anaconda3/envs/lgh_pymarl/lib/python3.8/site-packages/jsonpickle/ext/numpy.py:305: UserWarning: ndarray is defined by reference to an object we do not know how to serialize. A deep copy is serialized instead, breaking memory aliasing.
  warnings.warn(msg)
114514           [(45, 0.0)] <class 'float'> battle_won_mean
114514           [(45, 5.0)] <class 'float'> dead_allies_mean
114514           [(45, 0.0)] <class 'float'> dead_enemies_mean
114514           [(45, 45.0)] <class 'float'> ep_length_mean
114514           [(45, 1.0)] <class 'float'> epsilon
114514           [(1701, array(2.2087266, dtype=float32))] <class 'numpy.ndarray'> grad_norm
114514           [(1701, 0.0993373915553093)] <class 'float'> loss
114514           [(1701, 0.03426593329750882)] <class 'float'> q_taken_mean
114514           [(45, 3.9215686274509802)] <class 'numpy.float64'> return_mean
114514           [(45, 0.0)] <class 'numpy.float64'> return_std
114514           [(1701, 0.07882765422912992)] <class 'float'> target_mean
114514           [(1701, 0.23834626805004408)] <class 'float'> td_error_abs
114514           [(45, 0.0)] <class 'float'> test_battle_won_mean
114514           [(45, 4.78125)] <class 'float'> test_dead_allies_mean
114514           [(45, 1.125)] <class 'float'> test_dead_enemies_mean
114514           [(45, 64.25)] <class 'float'> test_ep_length_mean
114514           [(45, 7.2077205882352935)] <class 'numpy.float64'> test_return_mean
114514           [(45, 1.4898925724128003)] <class 'numpy.float64'> test_return_std
[INFO 21:01:43] my_main Recent Stats | t_env:       2543 | Episode:       47
battle_won_mean:           0.0000	dead_allies_mean:          5.0000	dead_enemies_mean:         0.0000	ep_length_mean:           45.0000
epsilon:                   1.0000	grad_norm:                 2.2087	loss:                      0.0993	q_taken_mean:              0.0343
return_mean:               3.9216	return_std:                0.0000	target_mean:               0.0788	td_error_abs:              0.2383
test_battle_won_mean:      0.0000	test_dead_allies_mean:     4.7812	test_dead_enemies_mean:    1.1250	test_ep_length_mean:      64.2500
test_return_mean:          7.2077	test_return_std:           1.4899	
